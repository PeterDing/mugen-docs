.. Mugen documentation master file, created by
   sphinx-quickstart on Sun Sep  4 19:28:23 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Mugen - HTTP for Asynchronous Requests
======================================

Mugen is library for http asynchronous requests.

Only running on python 3.4.0+

ok, code demo:

.. code-block:: python

    import asyncio
    import mugen

    @asyncio.coroutine
    def task():
        url = 'http://www.google.com'
        resp = yield from mugen.get(url)
        print(resp.text)

    loop = asyncio.get_event_loop()
    asyncio.ensure_future(task())
    loop.run_forever()


Mugen is a name from *Samurai Champloo* (サムライチャンプル, 混沌武士)


Feature Support
---------------

-   Keep-Alive & Connection Pooling
-   DNS cache
-   Sessions with Cookie Persistence
-   Automatic Decompression
-   Automatic Content Decoding
-   HTTP(S) Proxy Support
-   Connection Timeouts


The User Guide
==============

Installation
============

Pip Install Requests
--------------------

Mugen is running on Python3.4+, installing with pip3::

    $ pip3 install mugen


Install from Source Code
------------------------

Mugen is developed on GitHub. You can find `here <https://github.com/PeterDing/mugen>`_.

Clone the repository::

    $ git clone git://github.com/PeterDing/mugen.git

or, download the `tarball <https://github.com/PeterDing/mugen/tarball/master>`_::

    $ curl -OL https://github.com/PeterDing/mugen/tarball/master

Install it::

    $ python3 setup.py install



Quickstart
==========

Following is simple demo to show you how mugen works.


Make a Request
--------------

To make a asynchronous request with mugen, firstly, you must import the standard
library ``asyncio`` and ``mugen``:

.. code-block:: python

    import asyncio
    import mugen

OK, let us define a coroutine function as an asynchronous task, so asyncio can be
use it. The task will make an asynchronous request. Finally, We give the task
to one asynchronous loop which is generated by asyncio:

.. code-block:: python

    @asyncio.coroutine
    def task():
        resp = yield from mugen.get('http://httpbin.org/headers')
        print(resp.text)

    loop = asyncio.get_event_loop()
    asyncio.ensure_future(task())
    loop.run_forever()


After Python3.5, we can use ``async def`` and ``await`` instead of
``@asyncio.coroutine`` and ``yield from``.

Here, we get a Response object called ``resp`` after the request is over.
``resp`` contains all the information of the request.

.. WARNING:: We will ignore loop define, after above code, as you has known it.

We can also make a POST request, simply as following:

.. code-block:: python

    resp = yield from mugen.post('http://httpbin.org/post', data='fooboo')

Now, mugen supports HTTP request types: GET, POST, HEAD. Other methods is
on the load.


Parameters in URLs
------------------

Like `requests <https://github.com/kennethreitz/requests>`_, Passing Parameters
to urls is easy.

.. code-block:: python

    params = {'foo': 'boo'}
    resp = yield from mugen.get('http://httpbin.org/post', params=params)


Response Content
----------------

We can read the content of the server's response.

.. code-block:: python

    resp = yield from mugen.get('https://api.github.com/events')
    print(resp.content)

``resp.content`` is the origin bytes of the response (decoded if transfer-encodings
is ``gzip`` or ``deflate``), we can get its unicode string by ``resp.text`` which
decoded by ``resp.encoding``. If ``resp.encoding`` is wrong, setting it to the
right encoding.


JSON Response Content
---------------------

Handling JSON response content, mugen use standard library ``json``.

.. code-block:: python

    resp = yield from mugen.get('https://api.github.com/events')
    print(resp.json())


More complicated POST requests
------------------------------

To send some form-encoded data — much like an HTML form.

.. code-block:: python

    data = {'key1': 'value1', 'key2': 'value2'}
    resp = yield from mugen.get('http://httpbin.org/post', data=data)
    print(resp.json())

We can also put ``str`` or ``bytes`` to data.


POST a Multipart-Encoded File
-----------------------------

Now, mugen does not support post a multipart-encoded file.


Response Status Codes, Headers, Cookies, redirection
----------------------------------------------------

The status code of one response can be get by ``Request.status_code``:

.. code-block:: python

    resp = yield from mugen.get('https://api.github.com/events')
    print(resp.status_code)

The headers of the response is at ``resp.headers``, cookies is ``resp.cookies``
and redirecting history locates ``resp.history``.

Timeouts
--------

Setting second timeout to a request:

.. code-block:: python

    resp = yield from mugen.get('https://api.github.com/events', timeout=10)


Connection Pool
---------------

Mugen uses only one global connection pool to manage all connections.

We assume that ALL connections will be used more then once. So, when we use
``loop.run_until_complete(task())`` to start the loop, at the end of loop, ALL
connections will not be closed automatically. This could raise a exception.

If we just want to use one connection only once, please, setting ``recycle=False``
to the request:

.. code-block:: python

    import asyncio
    import mugen

    @asyncio.coroutine
    def task():
        url = 'http://www.google.com'
        resp = yield from mugen.get(url, recycle=False)
        print(resp.text)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(task())


Sessions
--------

Mugen supports session like other http library.

.. code-block:: python

    session = mugen.session()
    resp = yield from session.get('http://www.google.com')

``mugen.session()`` makes a ``Session`` object ``session`` for us, using to
handle parts of requests.


Proxies
-------

Mugen supports HTTP and HTTPS proxy. But it doesn't like
`requests <https://github.com/kennethreitz/requests>`_.

.. code-block:: python

    # for http proxy
    proxy = 'http://127.0.0.1:8080'
    resp = yield from mugen.get('http://www.google.com', proxy=proxy)

    # for https proxy
    proxy = 'http://127.0.0.1:8080'
    resp = yield from mugen.get('https://www.google.com', proxy=proxy)
